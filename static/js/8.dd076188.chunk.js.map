{"version":3,"sources":["src/components/Heading.tsx","src/components/Border.tsx","src/components/ChangeNetwork.tsx","src/components/InsufficientBalanceButton.tsx","src/components/ErrorMessage.tsx","src/components/FetchingButton.tsx","src/components/InfoBox.tsx","src/components/AmountMeta.tsx","src/components/ApproveButton.tsx","src/components/Meta.tsx","src/components/TokenInput.tsx","src/components/Notice.tsx","src/components/Input.tsx","src/hooks/useSushiBar.tsx","src/hooks/useStakingState.tsx","src/screens/StakeScreen.tsx"],"names":["Heading","props","accent","useColors","style","alignItems","height","marginBottom","disabled","Spacing","small","medium","fontWeight","flex","fontSize","IS_DESKTOP","paddingBottom","tiny","text","buttonText","type","size","title","onPress","onPressButton","color","buttonStyle","paddingHorizontal","Border","border","width","backgroundColor","marginTop","ChangeNetwork","chainId","t","useTranslation","networkName","1","42","justifyContent","light","textAlign","marginVertical","large","InsufficientBalanceButton","symbol","ErrorMessage","error","borderColor","borderWidth","padding","code","note","message","FetchingButton","InfoBox","darkMode","useContext","GlobalContext","backgroundLight","borderDark","useStyles","normal","AmountMeta","textDark","textLight","placeholder","amount","suffix","ApproveButton","approveToken","EthersContext","useState","loading","setLoading","useCallback","a","async","token","onError","address","spender","tx","wait","onSuccess","hidden","containerStyle","Meta","textMedium","red","useLinker","url","label","undefined","danger","textDecorationLine","MaxButton","onPressMax","balance","isETH","fee","pow10","gt","sub","ethers","constants","Zero","updateAmount","formatBalance","decimals","position","right","bottom","Platform","OS","maxButtonText","TokenInput","onChangeText","onAmountChanged","parseBalance","e","endsWith","indexOf","length","value","keyboardType","autoFocus","inputStyle","marginHorizontal","inputContainerStyle","borderBottomWidth","labelStyle","fontFamily","paddingTop","hideMaxButton","Notice","borderStyle","clear","titleStyle","paddingVertical","alignSelf","Input","errors","forbidden","forEach","validation","match","regexp","push","allowed","join","minHeight","outline","placeholderTextColor","errorStyle","useSushiBar","enter","signer","sushiBar","getContract","SUSHI_BAR","estimateGas","gasLimit","mul","div","logTransaction","toString","leave","useStakingState","getTokenAllowance","tokens","updateTokens","sushiStaked","setSushiStaked","sushiSupply","setSushiSupply","xSushiSupply","setXSushiSupply","setAmount","sushiAllowed","setSushiAllowed","xSushiAllowed","setXSushiAllowed","entering","setEntering","leaving","setLeaving","sushi","useMemo","find","xSushi","useEffect","useAsyncEffect","minAllowance","BigNumber","from","pow","sushiAllowance","gte","xSushiAllowance","sushiContract","balanceOf","totalSupply","xSushiContract","onEnter","parsed","onLeave","Staking","state","SushiBalance","AmountInput","isZero","StakeInfo","isEmptyValue","xSushiAmount","xSushiTotal","xSushiBalance","add","share","Fraction","Controls","setError","StakeButton","StakeScreen"],"mappings":"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","file":"static/js/8.dd076188.chunk.js","sourcesContent":["import React, { FC } from \"react\";\nimport { TextStyle } from \"react-native\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport Button from \"./Button\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\ninterface HeadingProps {\n    text: string;\n    fontWeight?: \"light\" | \"regular\" | \"bold\";\n    disabled?: boolean;\n    buttonText?: string;\n    onPressButton?: () => void | Promise<void>;\n    style?: TextStyle;\n}\n\nconst Heading: FC<HeadingProps> = props => {\n    const { accent } = useColors();\n    return (\n        <FlexView style={{ alignItems: \"flex-end\", height: 32, marginBottom: props.disabled ? 0 : Spacing.small }}>\n            <Text\n                medium={true}\n                fontWeight={props.fontWeight || \"bold\"}\n                disabled={props.disabled}\n                style={[{ flex: 1, fontSize: IS_DESKTOP ? 24 : 18, paddingBottom: Spacing.tiny }, props.style]}>\n                {props.text}\n            </Text>\n            {props.buttonText && (\n                <Button\n                    type={\"clear\"}\n                    size={\"small\"}\n                    title={props.buttonText}\n                    onPress={props.onPressButton}\n                    color={accent}\n                    buttonStyle={{ paddingHorizontal: Spacing.tiny }}\n                />\n            )}\n        </FlexView>\n    );\n};\n\nexport default Heading;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\nconst Border = props => {\n    const { border } = useColors();\n    return (\n        <View\n            style={{\n                height: 1,\n                width: \"100%\",\n                backgroundColor: border,\n                marginTop: props.small ? Spacing.tiny : Spacing.small,\n                marginBottom: props.small ? Spacing.tiny : Spacing.small + Spacing.tiny\n            }}\n        />\n    );\n};\n\nexport default Border;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport Text from \"./Text\";\n\nconst ChangeNetwork = ({ chainId = 1 }) => {\n    const t = useTranslation();\n    const networkName = {\n        1: \"Mainnet\",\n        42: \"Kovan\"\n    }[chainId];\n    return (\n        <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\n            <Text light={true} style={{ textAlign: \"center\", marginVertical: Spacing.large }}>\n                {t(\"change-network-to\", { networkName })}\n            </Text>\n        </View>\n    );\n};\n\nexport default ChangeNetwork;\n","import React from \"react\";\n\nimport useTranslation from \"../hooks/useTranslation\";\nimport Button from \"./Button\";\n\nconst InsufficientBalanceButton = ({ symbol }: { symbol: string }) => {\n    const t = useTranslation();\n    return <Button title={symbol ? t(\"insufficient-\", { symbol }) : t(\"insufficient-balance\")} disabled={true} />;\n};\nexport default InsufficientBalanceButton;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport Text from \"./Text\";\n\nconst ErrorMessage = ({ error }: { error: MetamaskError }) => (\n    <View\n        style={{\n            borderColor: \"red\",\n            borderWidth: 1,\n            width: \"100%\",\n            padding: Spacing.tiny,\n            marginTop: Spacing.small\n        }}>\n        {error.code && (\n            <Text fontWeight={\"bold\"} style={{ color: \"red\", fontSize: 14 }}>\n                Error Code {error.code}\n            </Text>\n        )}\n        <Text note={true} style={{ color: \"red\", fontSize: 14 }}>\n            {error.message}\n        </Text>\n    </View>\n);\n\nexport default ErrorMessage;\n","import React from \"react\";\n\nimport useTranslation from \"../hooks/useTranslation\";\nimport Button from \"./Button\";\n\nconst FetchingButton = () => {\n    const t = useTranslation();\n    return <Button title={t(\"fetching\")} disabled={true} />;\n};\nexport default FetchingButton;\n","import React, { PropsWithChildren, useContext } from \"react\";\nimport { View, ViewProps } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\n\nconst InfoBox = (props: PropsWithChildren<ViewProps>) => {\n    const { darkMode } = useContext(GlobalContext);\n    const { backgroundLight, borderDark } = useColors();\n    const { border } = useStyles();\n    return (\n        <View\n            {...props}\n            style={[\n                {\n                    ...border({ color: darkMode ? borderDark : backgroundLight }),\n                    backgroundColor: backgroundLight,\n                    marginTop: Spacing.normal + Spacing.small,\n                    padding: Spacing.small + Spacing.tiny\n                },\n                props.style\n            ]}\n        />\n    );\n};\n\nexport default InfoBox;\n","import React, { FC } from \"react\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport Text from \"./Text\";\n\nexport interface AmountMetaProps {\n    amount?: string;\n    suffix?: string;\n    disabled?: boolean;\n}\n\nconst AmountMeta: FC<AmountMetaProps> = props => {\n    const t = useTranslation();\n    const { textDark, textLight, placeholder } = useColors();\n    return (\n        <Text\n            style={{\n                fontSize: IS_DESKTOP ? 28 : 20,\n                marginBottom: Spacing.normal,\n                color: props.disabled ? placeholder : props.amount ? textDark : textLight\n            }}>\n            {props.disabled ? t(\"n/a\") : props.amount ? props.amount + \" \" + (props.suffix || \"\") : t(\"fetching\")}\n        </Text>\n    );\n};\n\nexport default AmountMeta;\n","import React, { FC, useCallback, useContext, useState } from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport Token from \"../types/Token\";\nimport Button from \"./Button\";\n\nexport interface ApproveButtonProps {\n    token: Token;\n    spender: string;\n    onSuccess: () => void;\n    onError: (e) => void;\n    hidden?: boolean;\n}\n\nconst ApproveButton: FC<ApproveButtonProps> = props => {\n    const t = useTranslation();\n    const { approveToken } = useContext(EthersContext);\n    const [loading, setLoading] = useState(false);\n    const onPress = useCallback(async () => {\n        if (props.token) {\n            props.onError({});\n            setLoading(true);\n            try {\n                const tx = await approveToken(props.token.address, props.spender);\n                if (tx) {\n                    await tx.wait();\n                    props.onSuccess();\n                }\n            } catch (e) {\n                props.onError(e);\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [props.token]);\n    if (props.hidden) return <View />;\n    return (\n        <Button\n            title={t(\"approve-\", { symbol: props.token?.symbol || \"\" })}\n            onPress={onPress}\n            loading={loading}\n            containerStyle={{ marginBottom: Spacing.tiny }}\n        />\n    );\n};\n\nexport default ApproveButton;\n","import React, { FC } from \"react\";\n\nimport { IS_DESKTOP } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useLinker from \"../hooks/useLinker\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\nexport interface MetaProps {\n    label: string;\n    text?: string;\n    suffix?: string;\n    url?: string;\n    danger?: boolean;\n    disabled?: boolean;\n}\n\nconst Meta: FC<MetaProps> = props => {\n    const t = useTranslation();\n    const { textMedium, textLight, placeholder, red } = useColors();\n    const onPress = useLinker(props.url || \"\", \"\", \"_blank\");\n    const text = props.disabled\n        ? \"N/A\"\n        : props.text\n        ? props.text + (props.suffix ? \" \" + props.suffix : \"\")\n        : t(\"fetching\");\n    return (\n        <FlexView style={{ justifyContent: \"space-between\", marginTop: 4 }}>\n            <Text note={!IS_DESKTOP} fontWeight={\"bold\"} style={{ color: props.disabled ? placeholder : textMedium }}>\n                {props.label}\n            </Text>\n            <Text\n                note={!IS_DESKTOP}\n                onPress={props.url ? onPress : undefined}\n                style={{\n                    color: props.danger ? red : props.disabled ? placeholder : props.text ? textMedium : textLight,\n                    textDecorationLine: props.url ? \"underline\" : \"none\"\n                }}>\n                {text}\n            </Text>\n        </FlexView>\n    );\n};\n\nexport default Meta;\n","import React, { FC, useCallback } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport { ethers } from \"ethers\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\nimport Token from \"../types/Token\";\nimport { formatBalance, isETH, parseBalance, pow10 } from \"../utils\";\nimport Button from \"./Button\";\nimport Heading from \"./Heading\";\nimport Input from \"./Input\";\n\nexport interface TokenInputProps {\n    title?: string;\n    token?: Token;\n    amount: string;\n    onAmountChanged: (amount: string) => void;\n    label?: string;\n    hideMaxButton?: boolean;\n    maxButtonText?: string;\n    autoFocus?: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst TokenInput: FC<TokenInputProps> = props => {\n    const { border } = useStyles();\n    const onChangeText = useCallback(\n        (text: string) => {\n            if (props.token && props.onAmountChanged) {\n                try {\n                    parseBalance(text, props.token.decimals);\n                    props.onAmountChanged(text);\n                } catch (e) {\n                    if (text.endsWith(\".\") && text.indexOf(\".\") === text.length - 1) {\n                        props.onAmountChanged(text);\n                    }\n                }\n            }\n        },\n        [props.token, props.onAmountChanged]\n    );\n    return (\n        <View>\n            {props.title && <Heading text={props.title} />}\n            <View>\n                <Input\n                    label={props.label}\n                    value={props.amount}\n                    onChangeText={onChangeText}\n                    placeholder={\"0.0\"}\n                    keyboardType={\"numeric\"}\n                    autoFocus={props.autoFocus || false}\n                    inputStyle={{ marginHorizontal: Spacing.tiny }}\n                    inputContainerStyle={{ borderBottomWidth: 0 }}\n                    labelStyle={{ fontFamily: \"light\", height: props.label ? \"auto\" : 0 }}\n                    containerStyle={{\n                        ...border(),\n                        paddingHorizontal: Spacing.tiny,\n                        paddingTop: 15,\n                        paddingBottom: 2\n                    }}\n                />\n                {props.token?.balance?.gt(0) && !props.hideMaxButton && (\n                    <MaxButton\n                        token={props.token}\n                        maxButtonText={props.maxButtonText}\n                        updateAmount={props.onAmountChanged}\n                    />\n                )}\n            </View>\n        </View>\n    );\n};\n\nconst MaxButton = (props: { token: Token; updateAmount; maxButtonText?: string }) => {\n    const { accent } = useColors();\n    const onPressMax = useCallback(() => {\n        if (props.token) {\n            let balance = props.token.balance;\n            if (isETH(props.token)) {\n                // Subtract 0.01 ETH for gas fee\n                const fee = pow10(16);\n                balance = balance.gt(fee) ? balance.sub(fee) : ethers.constants.Zero;\n            }\n            props.updateAmount(formatBalance(balance, props.token.decimals));\n        }\n    }, [props.token, props.updateAmount]);\n    return (\n        <View style={{ position: \"absolute\", right: 12, bottom: Platform.OS === \"web\" ? 12 : 24 }}>\n            <Button\n                type={\"clear\"}\n                size={\"small\"}\n                color={accent}\n                title={props.maxButtonText || (IS_DESKTOP ? \"MAX \" + props.token.symbol : \"MAX\")}\n                fontWeight={\"bold\"}\n                onPress={onPressMax}\n                buttonStyle={{ paddingHorizontal: Spacing.tiny }}\n            />\n        </View>\n    );\n};\n\nexport default TokenInput;\n","import React from \"react\";\nimport { View, ViewStyle } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\nimport Button from \"./Button\";\nimport Text from \"./Text\";\n\nexport interface NoticeProps {\n    text: string;\n    clear?: boolean;\n    color?: string;\n    buttonText?: string;\n    onPressButton?: () => void;\n    style?: ViewStyle;\n}\n\nconst Notice = (props: NoticeProps) => {\n    const { textLight } = useColors();\n    const { border } = useStyles();\n    const borderStyle = border({ color: props.color });\n    const color = props.color || textLight;\n    return (\n        <View style={[props.clear ? {} : borderStyle, props.style]}>\n            <Text note={true} style={{ color }}>\n                {props.text}\n            </Text>\n            {props.buttonText && props.onPressButton && (\n                <Button\n                    title={props.buttonText}\n                    type={\"clear\"}\n                    size={\"small\"}\n                    fontWeight={\"bold\"}\n                    onPress={props.onPressButton}\n                    titleStyle={{ color }}\n                    buttonStyle={{ paddingHorizontal: 0, paddingVertical: 0 }}\n                    style={{ alignSelf: \"flex-end\", marginTop: Spacing.tiny }}\n                />\n            )}\n        </View>\n    );\n};\n\nexport default Notice;\n","import React, { FC, useCallback } from \"react\";\nimport { Platform } from \"react-native\";\nimport { Input as NativeInput, InputProps as NativeInputProps } from \"react-native-elements\";\n\nimport useColors from \"../hooks/useColors\";\n\nexport interface Validation {\n    regexp: RegExp;\n    error: string;\n}\n\nexport interface InputProps extends NativeInputProps {\n    color?: string;\n    size?: \"small\" | \"normal\" | \"large\";\n    allowed?: Validation[];\n    forbidden?: Validation[];\n    onError?: (error: string) => void;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst Input: FC<InputProps> = props => {\n    const { textDark, textMedium, textLight } = useColors();\n    const size = props.size || \"normal\";\n    const color = props.color || textDark;\n    const fontSize = size === \"small\" ? 16 : size === \"large\" ? 24 : 20;\n    const onChangeText = useCallback(\n        (text: string) => {\n            props.onChangeText?.(text);\n            props.onError?.(\"\");\n            const errors = [] as string[];\n            if (text !== \"\" && props.forbidden) {\n                props.forbidden.forEach(validation => {\n                    if (text.match(validation.regexp)) {\n                        errors.push(validation.error);\n                    }\n                });\n            }\n            if (text !== \"\" && props.allowed) {\n                props.allowed.forEach(validation => {\n                    if (!text.match(validation.regexp)) {\n                        errors.push(validation.error);\n                    }\n                });\n            }\n            if (errors.length > 0) {\n                props.onError?.(errors.join(\"\\n\"));\n            }\n        },\n        [props.onChangeText, props.onError, props.forbidden, props.allowed]\n    );\n    return (\n        <NativeInput\n            {...props}\n            inputStyle={[\n                { fontSize, fontFamily: \"regular\", paddingBottom: 4, color, marginTop: 0, minHeight: 32 },\n                // @ts-ignore\n                Platform.OS === \"web\" ? { outline: \"none\" } : {},\n                props.inputStyle\n            ]}\n            labelStyle={[{ color: textMedium }, props.labelStyle]}\n            placeholderTextColor={props.placeholderTextColor || textLight}\n            errorStyle={props.onError ? { height: 0 } : props.errorStyle}\n            containerStyle={[{ paddingHorizontal: 0 }, props.containerStyle]}\n            onChangeText={onChangeText}\n        />\n    );\n};\n\nexport default Input;\n","import { useCallback } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport { SUSHI_BAR } from \"../constants/contracts\";\nimport { getContract } from \"../utils\";\nimport { logTransaction } from \"../utils/analytics-utils\";\n\nconst useSushiBar = () => {\n    const enter = useCallback(async (amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const sushiBar = getContract(\"SushiBar\", SUSHI_BAR, signer);\n        const gasLimit = await sushiBar.estimateGas.enter(amount);\n        const tx = await sushiBar.enter(amount, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return logTransaction(tx, \"SushiBar.enter()\", amount.toString());\n    }, []);\n\n    const leave = useCallback(async (amount: ethers.BigNumber, signer: ethers.Signer) => {\n        const sushiBar = getContract(\"SushiBar\", SUSHI_BAR, signer);\n        const gasLimit = await sushiBar.estimateGas.leave(amount);\n        const tx = await sushiBar.leave(amount, {\n            gasLimit: gasLimit.mul(120).div(100)\n        });\n        return logTransaction(tx, \"SushiBar.leave()\", amount.toString());\n    }, []);\n\n    return {\n        enter,\n        leave\n    };\n};\n\nexport default useSushiBar;\n","import { useCallback, useContext, useEffect, useMemo, useState } from \"react\";\n\nimport { ethers } from \"ethers\";\nimport useAsyncEffect from \"use-async-effect\";\nimport { SUSHI_BAR } from \"../constants/contracts\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport Token from \"../types/Token\";\nimport { getContract, parseBalance } from \"../utils\";\nimport useSushiBar from \"./useSushiBar\";\n\nexport type StakeAction = \"sushi-balance\" | \"stake\";\nexport type UnstakeAction = \"xsushi-balance\" | \"unstake\";\n\nexport interface StakingState {\n    sushi?: Token;\n    xSushi?: Token;\n    sushiStaked?: ethers.BigNumber;\n    sushiSupply?: ethers.BigNumber;\n    xSushiSupply?: ethers.BigNumber;\n    amount: string;\n    setAmount: (amount: string) => void;\n    sushiAllowed: boolean;\n    setSushiAllowed: (allowed: boolean) => void;\n    xSushiAllowed: boolean;\n    setXSushiAllowed: (allowed: boolean) => void;\n    loading: boolean;\n    onEnter: () => Promise<void>;\n    entering: boolean;\n    onLeave: () => Promise<void>;\n    leaving: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useStakingState: () => StakingState = () => {\n    const { signer, address, getTokenAllowance, tokens, updateTokens } = useContext(EthersContext);\n    const { enter, leave } = useSushiBar();\n    const [sushiStaked, setSushiStaked] = useState<ethers.BigNumber>();\n    const [sushiSupply, setSushiSupply] = useState<ethers.BigNumber>();\n    const [xSushiSupply, setXSushiSupply] = useState<ethers.BigNumber>();\n    const [amount, setAmount] = useState(\"\");\n    const [sushiAllowed, setSushiAllowed] = useState(false);\n    const [xSushiAllowed, setXSushiAllowed] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [entering, setEntering] = useState(false);\n    const [leaving, setLeaving] = useState(false);\n\n    const sushi = useMemo(() => tokens.find(token => token.symbol === \"SUSHI\"), [tokens]);\n    const xSushi = useMemo(() => tokens.find(token => token.symbol === \"xSUSHI\"), [tokens]);\n\n    useEffect(() => {\n        setAmount(\"\");\n    }, [address]);\n\n    useAsyncEffect(async () => {\n        if (sushi && xSushi && signer) {\n            setSushiAllowed(false);\n            setXSushiAllowed(false);\n            setLoading(true);\n            try {\n                const minAllowance = ethers.BigNumber.from(2)\n                    .pow(96)\n                    .sub(1);\n                const sushiAllowance = await getTokenAllowance(sushi.address, SUSHI_BAR);\n                setSushiAllowed(ethers.BigNumber.from(sushiAllowance).gte(minAllowance));\n                const xSushiAllowance = await getTokenAllowance(xSushi.address, SUSHI_BAR);\n                setXSushiAllowed(ethers.BigNumber.from(xSushiAllowance).gte(minAllowance));\n\n                const sushiContract = getContract(\"ERC20\", sushi.address, signer);\n                setSushiStaked(await sushiContract.balanceOf(SUSHI_BAR));\n                setSushiSupply(await sushiContract.totalSupply());\n                const xSushiContract = getContract(\"ERC20\", xSushi.address, signer);\n                setXSushiSupply(await xSushiContract.totalSupply());\n            } finally {\n                setLoading(false);\n            }\n        }\n    }, [sushi, xSushi, signer]);\n\n    const onEnter = useCallback(async () => {\n        if (amount && sushi && signer) {\n            setEntering(true);\n            try {\n                const parsed = parseBalance(amount, sushi.decimals);\n                const tx = await enter(parsed, signer);\n                if (tx) {\n                    await tx.wait();\n                    await updateTokens();\n                    setAmount(\"\");\n                }\n            } finally {\n                setEntering(false);\n            }\n        }\n    }, [amount, sushi, signer]);\n\n    const onLeave = useCallback(async () => {\n        if (amount && xSushi && signer) {\n            setLeaving(true);\n            try {\n                const parsed = parseBalance(amount, xSushi.decimals);\n                const tx = await leave(parsed, signer);\n                if (tx) {\n                    await tx.wait();\n                    await updateTokens();\n                    setAmount(\"\");\n                }\n            } finally {\n                setLeaving(false);\n            }\n        }\n    }, [amount, xSushi, signer]);\n\n    return {\n        sushi,\n        xSushi,\n        sushiStaked,\n        sushiSupply,\n        xSushiSupply,\n        amount,\n        setAmount,\n        sushiAllowed,\n        setSushiAllowed,\n        xSushiAllowed,\n        setXSushiAllowed,\n        loading,\n        onEnter,\n        entering,\n        onLeave,\n        leaving\n    };\n};\n\nexport default useStakingState;\n","import React, { useContext, useState } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport AmountMeta from \"../components/AmountMeta\";\nimport ApproveButton from \"../components/ApproveButton\";\nimport BackgroundImage from \"../components/BackgroundImage\";\nimport Border from \"../components/Border\";\nimport Button from \"../components/Button\";\nimport ChangeNetwork from \"../components/ChangeNetwork\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport Heading from \"../components/Heading\";\nimport InfoBox from \"../components/InfoBox\";\nimport InsufficientBalanceButton from \"../components/InsufficientBalanceButton\";\nimport Meta from \"../components/Meta\";\nimport Notice from \"../components/Notice\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport TokenInput from \"../components/TokenInput\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { StakingSubMenu } from \"../components/web/WebSubMenu\";\nimport { SUSHI_BAR } from \"../constants/contracts\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport Fraction from \"../constants/Fraction\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useStakingState, { StakingState } from \"../hooks/useStakingState\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { formatBalance, isEmptyValue, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst StakeScreen = () => {\n    const t = useTranslation();\n    return (\n        <Screen>\n            <Container>\n                <BackgroundImage />\n                <Content>\n                    <Title text={t(\"stake\")} />\n                    <Text light={true}>{t(\"stake-desc\")}</Text>\n                    <Staking />\n                </Content>\n                {Platform.OS === \"web\" && <WebFooter />}\n            </Container>\n            <StakingSubMenu />\n        </Screen>\n    );\n};\n\nconst Staking = () => {\n    const { chainId } = useContext(EthersContext);\n    const t = useTranslation();\n    const state = useStakingState();\n    if (chainId !== 1) return <ChangeNetwork />;\n    return (\n        <View style={{ marginTop: Spacing.large }}>\n            <SushiBalance state={state} />\n            <Border />\n            <AmountInput state={state} />\n            {state.sushi && state.sushi.balance.isZero() && (\n                <Notice text={t(\"you-dont-have-sushi\")} color={\"orange\"} style={{ marginTop: Spacing.small }} />\n            )}\n            <StakeInfo state={state} />\n        </View>\n    );\n};\n\nconst SushiBalance = ({ state }: { state: StakingState }) => {\n    const t = useTranslation();\n    return (\n        <View>\n            <Heading text={t(\"your-sushi\")} />\n            <AmountMeta\n                amount={state.sushi ? formatBalance(state.sushi.balance, state.sushi.decimals) : \"\"}\n                suffix={\"SUSHI\"}\n            />\n        </View>\n    );\n};\n\nconst AmountInput = ({ state }: { state: StakingState }) => {\n    const t = useTranslation();\n    if (!state.sushi || state.sushi.balance.isZero()) {\n        return <Heading text={t(\"amount-to-stake\")} disabled={true} />;\n    }\n    return (\n        <View>\n            <Heading text={t(\"amount-to-stake\")} />\n            <TokenInput\n                token={state.sushi}\n                amount={state.amount}\n                onAmountChanged={state.setAmount}\n                autoFocus={IS_DESKTOP}\n            />\n        </View>\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst StakeInfo = ({ state }: { state: StakingState }) => {\n    const t = useTranslation();\n    const disabled =\n        !state.sushi ||\n        state.sushi.balance.isZero() ||\n        !state.xSushi ||\n        !state.sushiStaked ||\n        !state.xSushiSupply ||\n        isEmptyValue(state.amount);\n    const xSushiAmount = disabled\n        ? undefined\n        : parseBalance(state.amount, state.sushi!.decimals)\n              .mul(state.xSushiSupply!)\n              .div(state.sushiStaked!);\n    const xSushiTotal = disabled ? undefined : formatBalance(state.xSushiSupply!, state.xSushi!.decimals, 8);\n    const xSushiBalance = disabled ? undefined : state.xSushi!.balance.add(xSushiAmount!);\n    const share = disabled\n        ? undefined\n        : Fraction.from(xSushiAmount!.add(xSushiBalance!), state.xSushiSupply!).toString();\n    return (\n        <InfoBox>\n            <AmountMeta\n                amount={xSushiAmount ? formatBalance(xSushiAmount, state.xSushi!.decimals, 8) : \"\"}\n                suffix={\"xSUSHI\"}\n                disabled={disabled}\n            />\n            <Meta label={t(\"xsushi-share\")} text={share} suffix={\"%\"} disabled={disabled} />\n            <Meta label={t(\"total-xsushi\")} text={xSushiTotal} disabled={disabled} />\n            <Controls state={state} />\n        </InfoBox>\n    );\n};\n\nconst Controls = ({ state }: { state: StakingState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    return (\n        <View style={{ marginTop: Spacing.normal }}>\n            {!state.sushi || state.sushi.balance.isZero() || isEmptyValue(state.amount) ? (\n                <StakeButton state={state} onError={setError} disabled={true} />\n            ) : parseBalance(state.amount, state.sushi.decimals).gt(state.sushi.balance) ? (\n                <InsufficientBalanceButton symbol={state.sushi.symbol} />\n            ) : state.loading ? (\n                <FetchingButton />\n            ) : (\n                <>\n                    <ApproveButton\n                        token={state.sushi}\n                        spender={SUSHI_BAR}\n                        onSuccess={() => state.setSushiAllowed(true)}\n                        onError={setError}\n                        hidden={state.sushiAllowed}\n                    />\n                    <StakeButton state={state} onError={setError} disabled={!state.sushiAllowed} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </View>\n    );\n};\n\nconst StakeButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: StakingState;\n    onError: (e) => void;\n    disabled: boolean;\n}) => {\n    const t = useTranslation();\n    const onPress = async () => {\n        onError({});\n        try {\n            await state.onEnter();\n            state.setAmount(\"\");\n        } catch (e) {\n            onError(e);\n        }\n    };\n    return <Button title={t(\"stake\")} loading={state.entering} onPress={onPress} disabled={disabled} />;\n};\n\nexport default StakeScreen;\n"],"sourceRoot":""}