{"version":3,"sources":["src/components/ChangeNetwork.tsx","src/hooks/useLevxDistributionState.tsx","src/screens/LevxDistributionScreen.tsx"],"names":["ChangeNetwork","chainId","t","useTranslation","networkName","1","42","style","flex","alignItems","justifyContent","light","textAlign","marginVertical","Spacing","large","getRedirectUri","window","location","protocol","hostname","port","useLevxDistributionState","useAuth0","isAuthenticated","user","loginWithRedirect","getAccessTokenSilently","handleRedirectCallback","useAsyncEffect","a","async","scope","accessToken","console","log","fetch","resp","json","error","onLogin","method","connection","redirectUri","LevxDistribution","useContext","EthersContext","state","View","marginTop","SignInButtons","useColors","twitter","discord","normal","Button","title","color","icon","type","name","size","marginBottom","small","onPress","LevxDistributionScreen","Screen","Container","BackgroundImage","Content","Title","text","Text","Platform","OS","WebFooter"],"mappings":"wFAAA,mDAsBeA,IAfO,SAAC,GAAqB,IAAD,IAAlBC,eAAkB,MAAR,EAAQ,EACjCC,EAAIC,cACJC,EAAc,CAChBC,EAAG,UACHC,GAAI,SACNL,GACF,OACI,kBAAC,IAAD,CAAMM,MAAO,CAAEC,KAAM,EAAGC,WAAY,SAAUC,eAAgB,WAC1D,kBAAC,IAAD,CAAMC,OAAO,EAAMJ,MAAO,CAAEK,UAAW,SAAUC,eAAgBC,IAAQC,QACpEb,EAAE,oBAAqB,CAAEE,oB,+NCmBpCY,EAAiB,WAAO,IAAD,EACYC,OAAOC,SAApCC,EADiB,EACjBA,SAAUC,EADO,EACPA,SAAUC,EADH,EACGA,KAC5B,OAAOF,EAAW,KAAOC,GAAqB,OAATC,EAAgB,GAAK,IAAMA,GAAQ,oBAG7DC,EA9B+C,WAAO,IAAD,EACqCC,cAAvFC,GADkD,EACxDC,KADwD,EAClDD,iBAAiBE,EADiC,EACjCA,kBAAmBC,EADc,EACdA,uBADc,EACUC,uBAE1EC,KAAe,4BAAAC,EAAAC,OAAA,oDACPP,EADO,4CAAAM,EAAA,MAIuBH,EAAuB,CAAEK,MAAO,0BAJvD,cAIGC,EAJH,OAKHC,QAAQC,IAAIF,GALT,WAAAH,EAAA,MAMgBM,MAAM,2CAA2CH,IANjE,cAMGI,EANH,YAOHH,QAPG,YAAAJ,EAAA,MAOeO,EAAKC,QAPpB,yBAOKH,IAPL,kEASHD,QAAQK,MAAR,MATG,mEAYZ,CAACf,IAKJ,MAAO,CACHgB,QAJY,SAAOC,GAAP,SAAAX,EAAAC,OAAA,kEAAAD,EAAA,MACNJ,EAAkB,CAAEgB,WAAYD,EAAQE,YAAa3B,OAD/C,+D,iBCUd4B,EAAmB,WAAO,IACpB3C,EAAY4C,qBAAWC,KAAvB7C,QACF8C,EAAQzB,IACd,OAAgB,IAAZrB,EAAsB,kBAACD,EAAA,EAAD,MAEtB,kBAACgD,EAAA,EAAD,CAAMzC,MAAO,CAAE0C,UAAWnC,IAAQC,QAC9B,kBAAC,EAAD,CAAegC,MAAOA,MAK5BG,EAAgB,SAAC,GAAiD,IAA/CH,EAA8C,EAA9CA,MACf7C,EAAIC,cADyD,EAEtCgD,cAArBC,EAF2D,EAE3DA,QAASC,EAFkD,EAElDA,QACjB,OACI,kBAACL,EAAA,EAAD,CAAMzC,MAAO,CAAEM,eAAgBC,IAAQwC,SACnC,kBAACC,EAAA,EAAD,CACIC,MAAOtD,EAAE,wBACTuD,MAAOL,EACPM,KAAM,CAAEC,KAAM,qBAAsBC,KAAM,UAAWH,MAAO,QAASI,KAAM,IAC3EtD,MAAO,CAAEuD,aAAchD,IAAQiD,OAC/BC,QAAS,kBAAMjB,EAAMP,QAAQ,cAEjC,kBAACe,EAAA,EAAD,CACIC,MAAOtD,EAAE,wBACTuD,MAAOJ,EACPK,KAAM,CAAEC,KAAM,qBAAsBC,KAAM,UAAWH,MAAO,QAASI,KAAM,IAC3EG,QAAS,kBAAMjB,EAAMP,QAAQ,gBAM9ByB,UAnDgB,WAC3B,IAAM/D,EAAIC,cACV,OACI,kBAAC+D,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAOC,KAAMrE,EAAE,uBACf,kBAACsE,EAAA,EAAD,CAAM7D,OAAO,GAAOT,EAAE,2BACtB,kBAAC,EAAD,OAEa,QAAhBuE,IAASC,IAAgB,kBAACC,EAAA,EAAD,OAE9B,kBAAC,IAAD","file":"static/js/17.f2f97519.chunk.js","sourcesContent":["import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport Text from \"./Text\";\n\nconst ChangeNetwork = ({ chainId = 1 }) => {\n    const t = useTranslation();\n    const networkName = {\n        1: \"Mainnet\",\n        42: \"Kovan\"\n    }[chainId];\n    return (\n        <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\n            <Text light={true} style={{ textAlign: \"center\", marginVertical: Spacing.large }}>\n                {t(\"change-network-to\", { networkName })}\n            </Text>\n        </View>\n    );\n};\n\nexport default ChangeNetwork;\n","import { useAuth0 } from \"@auth0/auth0-react\";\nimport useAsyncEffect from \"use-async-effect\";\n\nexport interface LevxDistributionState {\n    onLogin: (method: LoginMethod) => void;\n}\n\nexport type LoginMethod = \"twitter\" | \"discord\";\n\n// tslint:disable-next-line:max-func-body-length\nconst useLevxDistributionState: () => LevxDistributionState = () => {\n    const { user, isAuthenticated, loginWithRedirect, getAccessTokenSilently, handleRedirectCallback } = useAuth0();\n\n    useAsyncEffect(async () => {\n        if (isAuthenticated) {\n            // TODO\n            try {\n                const accessToken = await getAccessTokenSilently({ scope: \"openid profile email\" });\n                console.log(accessToken);\n                const resp = await fetch(`http://localhost:3001/auth?access_token=${accessToken}`);\n                console.log(await resp.json());\n            } catch (e) {\n                console.error(e);\n            }\n        }\n    }, [isAuthenticated]);\n\n    const onLogin = async (method: LoginMethod) => {\n        await loginWithRedirect({ connection: method, redirectUri: getRedirectUri() });\n    };\n    return {\n        onLogin\n    };\n};\n\nconst getRedirectUri = () => {\n    const { protocol, hostname, port } = window.location;\n    return protocol + \"//\" + hostname + (port === \"80\" ? \"\" : \":\" + port) + \"/#/airdrops/levx\";\n};\n\nexport default useLevxDistributionState;\n","import React, { useContext } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport BackgroundImage from \"../components/BackgroundImage\";\nimport Button from \"../components/Button\";\nimport ChangeNetwork from \"../components/ChangeNetwork\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { AirdropsSubMenu } from \"../components/web/WebSubMenu\";\nimport { Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useColors from \"../hooks/useColors\";\nimport useLevxDistributionState, { LevxDistributionState } from \"../hooks/useLevxDistributionState\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport Screen from \"./Screen\";\n\nconst LevxDistributionScreen = () => {\n    const t = useTranslation();\n    return (\n        <Screen>\n            <Container>\n                <BackgroundImage />\n                <Content>\n                    <Title text={t(\"levx-distribution\")} />\n                    <Text light={true}>{t(\"levx-distribution-desc\")}</Text>\n                    <LevxDistribution />\n                </Content>\n                {Platform.OS === \"web\" && <WebFooter />}\n            </Container>\n            <AirdropsSubMenu />\n        </Screen>\n    );\n};\n\nconst LevxDistribution = () => {\n    const { chainId } = useContext(EthersContext);\n    const state = useLevxDistributionState();\n    if (chainId !== 1) return <ChangeNetwork />;\n    return (\n        <View style={{ marginTop: Spacing.large }}>\n            <SignInButtons state={state} />\n        </View>\n    );\n};\n\nconst SignInButtons = ({ state }: { state: LevxDistributionState }) => {\n    const t = useTranslation();\n    const { twitter, discord } = useColors();\n    return (\n        <View style={{ marginVertical: Spacing.normal }}>\n            <Button\n                title={t(\"sign-in-with-twitter\")}\n                color={twitter}\n                icon={{ type: \"material-community\", name: \"twitter\", color: \"white\", size: 20 }}\n                style={{ marginBottom: Spacing.small }}\n                onPress={() => state.onLogin(\"twitter\")}\n            />\n            <Button\n                title={t(\"sign-in-with-discord\")}\n                color={discord}\n                icon={{ type: \"material-community\", name: \"discord\", color: \"white\", size: 20 }}\n                onPress={() => state.onLogin(\"discord\")}\n            />\n        </View>\n    );\n};\n\nexport default LevxDistributionScreen;\n"],"sourceRoot":""}