{"version":3,"sources":["src/components/Heading.tsx","src/components/ItemSeparator.tsx","src/components/Selectable.tsx","src/components/TokenLogo.tsx","src/components/Border.tsx","src/components/CloseIcon.tsx","src/components/SelectIcon.tsx","src/components/ChangeNetwork.tsx","src/components/ErrorMessage.tsx","src/components/FetchingButton.tsx","src/components/InfoBox.tsx","src/components/Expandable.tsx","src/components/Loading.tsx","src/components/Meta.tsx","src/components/TokenSymbol.tsx","src/constants/index.ts","assets/images/empty-token.png","assets/images/ETH.png","src/constants/airdrops/index.ts","src/components/AirdropSelect.tsx","src/utils/getAirdropContract.ts","src/hooks/useAirdropsState.tsx","src/screens/AirdropsScreen.tsx"],"names":["Heading","props","accent","useColors","style","alignItems","height","marginBottom","disabled","Spacing","small","medium","fontWeight","flex","fontSize","IS_DESKTOP","paddingBottom","tiny","text","buttonText","type","size","title","onPress","onPressButton","color","buttonStyle","paddingHorizontal","ITEM_SEPARATOR_HEIGHT","ItemSeparator","Selectable","borderDark","overlay","border","useStyles","background","backgroundLight","containerStyle","hovered","activeOpacity","underlayColor","selected","backgroundColor","TokenLogo","useState","error","setError","placeholder","require","ETH","source","replaceWETH","isWETH","token","uri","logoURI","width","borderRadius","onError","opacity","Border","marginTop","CloseIcon","name","marginLeft","SelectIcon","ChangeNetwork","chainId","t","useTranslation","networkName","1","42","justifyContent","light","textAlign","marginVertical","large","ErrorMessage","borderColor","borderWidth","padding","code","note","message","FetchingButton","InfoBox","darkMode","useContext","GlobalContext","normal","Expandable","expanded","setExpanded","shouldExpand","viewOnly","undefined","onExpand","display","children","Loading","Meta","textMedium","textLight","red","useLinker","url","suffix","label","danger","textDecorationLine","TokenSymbol","caption","symbol","TTL","ALLOWED_SLIPPAGE","Percent","module","exports","description","constants","AddressZero","merkleRoot","snapshot","amount","utils","parseEther","entries","levxShoyuGrant","sushiCnAma","AirdropList","EthersContext","loadingTokens","tokens","renderItem","useCallback","item","find","address","key","airdrop","onSelectAirdrop","View","FlatList","keyExtractor","data","airdrops","AirdropItem","FlexView","Text","numberOfLines","ellipsizeMode","number","formatBalance","AirdropSelect","state","tk","selectedAirdrop","setSelectedAirdrop","getETHAirdropContract","signerOrProvider","Contract","abi","getLevxAirdropContract","Levx","useAirdropsState","provider","signer","updateTokens","loading","setLoading","claimEvent","setClaimEvent","claiming","setClaiming","useEffect","a","async","contract","filter","filters","Claim","queryFilter","ethAirdropReceipt","blockNumber","events","length","e","toLowerCase","onClaimLevx","entry","root","getMerkleRoot","proof","getMerkleProof","claim","parseBalance","tx","wait","onClaimETH","onClaimAsLevx","Fetcher","fetchPairData","convertToken","LEVX","pair","getOutputAmount","convertAmount","amountOut","amountOutMin","deduct","toExact","deadline","Math","floor","Date","getTime","claimAndSwapToLevx","Airdrops","AmountInfo","String","Controls","isZero","LEVX_TOKEN","outline","NotEligibleButton","Button","ClaimingButton","ShareAirdropToTwitterButton","tweet","priceUSD","Number","toFixed","encodeURIComponent","icon","iconRight","ClaimButton","ClaimAsLevxButton","ClaimedButton","AirdropsScreen","Screen","Container","BackgroundImage","Content","Title","Platform","OS","WebFooter"],"mappings":"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","file":"static/js/6.574cc86d.chunk.js","sourcesContent":["import React, { FC } from \"react\";\nimport { TextStyle } from \"react-native\";\n\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport Button from \"./Button\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\ninterface HeadingProps {\n    text: string;\n    fontWeight?: \"light\" | \"regular\" | \"bold\";\n    disabled?: boolean;\n    buttonText?: string;\n    onPressButton?: () => void | Promise<void>;\n    style?: TextStyle;\n}\n\nconst Heading: FC<HeadingProps> = props => {\n    const { accent } = useColors();\n    return (\n        <FlexView style={{ alignItems: \"flex-end\", height: 32, marginBottom: props.disabled ? 0 : Spacing.small }}>\n            <Text\n                medium={true}\n                fontWeight={props.fontWeight || \"bold\"}\n                disabled={props.disabled}\n                style={[{ flex: 1, fontSize: IS_DESKTOP ? 24 : 18, paddingBottom: Spacing.tiny }, props.style]}>\n                {props.text}\n            </Text>\n            {props.buttonText && (\n                <Button\n                    type={\"clear\"}\n                    size={\"small\"}\n                    title={props.buttonText}\n                    onPress={props.onPressButton}\n                    color={accent}\n                    buttonStyle={{ paddingHorizontal: Spacing.tiny }}\n                />\n            )}\n        </FlexView>\n    );\n};\n\nexport default Heading;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nexport const ITEM_SEPARATOR_HEIGHT = 10;\n\nconst ItemSeparator = () => <View style={{ height: ITEM_SEPARATOR_HEIGHT }} />;\n\nexport default ItemSeparator;\n","import React, { FC } from \"react\";\nimport { TouchableHighlight, View, ViewProps, ViewStyle } from \"react-native\";\nimport { Hoverable } from \"react-native-web-hover\";\n\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\n\nexport interface SelectableProps extends ViewProps {\n    selected: boolean;\n    onPress?: () => void;\n    disabled?: boolean;\n    containerStyle?: ViewStyle;\n}\n\nconst Selectable: FC<SelectableProps> = props => {\n    const { borderDark, accent, overlay } = useColors();\n    const { border } = useStyles();\n    const { background, backgroundLight } = useColors();\n    return (\n        <Hoverable style={props.containerStyle}>\n            {({ hovered }) => (\n                <TouchableHighlight activeOpacity={0.7} underlayColor={overlay} onPress={props.onPress}>\n                    <View\n                        {...props}\n                        style={[\n                            {\n                                ...border({ color: props.selected ? accent : borderDark }),\n                                backgroundColor: hovered && !props.disabled ? backgroundLight : background\n                            },\n                            props.style\n                        ]}\n                    />\n                </TouchableHighlight>\n            )}\n        </Hoverable>\n    );\n};\n\nexport default Selectable;\n","import React, { useState } from \"react\";\nimport { Image, View, ViewStyle } from \"react-native\";\n\nimport useColors from \"../hooks/useColors\";\nimport Token from \"../types/Token\";\nimport { isWETH } from \"../utils\";\n\nconst TokenLogo = (props: {\n    token: Token;\n    small?: boolean;\n    replaceWETH?: boolean;\n    disabled?: boolean;\n    style?: ViewStyle;\n}) => {\n    const { backgroundLight: disabled } = useColors();\n    const [error, setError] = useState(false);\n    const size = props.small ? 22 : 27;\n    const placeholder = require(\"../../assets/images/empty-token.png\");\n    const ETH = require(\"../../assets/images/ETH.png\");\n    const source = props.replaceWETH && isWETH(props.token) ? ETH : { uri: props.token.logoURI };\n    return (\n        <View\n            style={[\n                {\n                    width: size,\n                    height: size,\n                    backgroundColor: props.disabled ? disabled : \"white\",\n                    borderRadius: size / 2\n                },\n                props.style\n            ]}>\n            <Image\n                source={!props.token.logoURI || error ? placeholder : source}\n                onError={() => setError(true)}\n                style={{\n                    width: \"100%\",\n                    height: \"100%\",\n                    borderRadius: size / 2,\n                    opacity: props.disabled ? 0.5 : 1\n                }}\n            />\n        </View>\n    );\n};\n\nexport default TokenLogo;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\n\nconst Border = props => {\n    const { border } = useColors();\n    return (\n        <View\n            style={{\n                height: 1,\n                width: \"100%\",\n                backgroundColor: border,\n                marginTop: props.small ? Spacing.tiny : Spacing.small,\n                marginBottom: props.small ? Spacing.tiny : Spacing.small + Spacing.tiny\n            }}\n        />\n    );\n};\n\nexport default Border;\n","import React from \"react\";\nimport { Icon } from \"react-native-elements\";\n\nimport useColors from \"../hooks/useColors\";\n\nconst CloseIcon = () => {\n    const { accent } = useColors();\n    return <Icon type={\"material-community\"} name={\"close\"} color={accent} style={{ marginLeft: 4 }} />;\n};\n\nexport default CloseIcon;\n","import React from \"react\";\nimport { Icon } from \"react-native-elements\";\n\nimport useColors from \"../hooks/useColors\";\n\nconst SelectIcon = () => {\n    const { accent } = useColors();\n    return <Icon type={\"material-community\"} name={\"chevron-right\"} color={accent} style={{ marginLeft: 4 }} />;\n};\n\nexport default SelectIcon;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport Text from \"./Text\";\n\nconst ChangeNetwork = ({ chainId = 1 }) => {\n    const t = useTranslation();\n    const networkName = {\n        1: \"Mainnet\",\n        42: \"Kovan\"\n    }[chainId];\n    return (\n        <View style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\n            <Text light={true} style={{ textAlign: \"center\", marginVertical: Spacing.large }}>\n                {t(\"change-network-to\", { networkName })}\n            </Text>\n        </View>\n    );\n};\n\nexport default ChangeNetwork;\n","import React from \"react\";\nimport { View } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport Text from \"./Text\";\n\nconst ErrorMessage = ({ error }: { error: MetamaskError }) => (\n    <View\n        style={{\n            borderColor: \"red\",\n            borderWidth: 1,\n            width: \"100%\",\n            padding: Spacing.tiny,\n            marginTop: Spacing.small\n        }}>\n        {error.code && (\n            <Text fontWeight={\"bold\"} style={{ color: \"red\", fontSize: 14 }}>\n                Error Code {error.code}\n            </Text>\n        )}\n        <Text note={true} style={{ color: \"red\", fontSize: 14 }}>\n            {error.message}\n        </Text>\n    </View>\n);\n\nexport default ErrorMessage;\n","import React from \"react\";\n\nimport useTranslation from \"../hooks/useTranslation\";\nimport Button from \"./Button\";\n\nconst FetchingButton = () => {\n    const t = useTranslation();\n    return <Button title={t(\"fetching\")} disabled={true} />;\n};\nexport default FetchingButton;\n","import React, { PropsWithChildren, useContext } from \"react\";\nimport { View, ViewProps } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport { GlobalContext } from \"../context/GlobalContext\";\nimport useColors from \"../hooks/useColors\";\nimport useStyles from \"../hooks/useStyles\";\n\nconst InfoBox = (props: PropsWithChildren<ViewProps>) => {\n    const { darkMode } = useContext(GlobalContext);\n    const { backgroundLight, borderDark } = useColors();\n    const { border } = useStyles();\n    return (\n        <View\n            {...props}\n            style={[\n                {\n                    ...border({ color: darkMode ? borderDark : backgroundLight }),\n                    backgroundColor: backgroundLight,\n                    marginTop: Spacing.normal + Spacing.small,\n                    padding: Spacing.small + Spacing.tiny\n                },\n                props.style\n            ]}\n        />\n    );\n};\n\nexport default InfoBox;\n","import React, { FC, ReactNode, useState } from \"react\";\nimport { View, ViewStyle } from \"react-native\";\n\nimport useTranslation from \"../hooks/useTranslation\";\nimport Heading from \"./Heading\";\n\nexport interface ExpandableProps {\n    title: string;\n    expanded: boolean;\n    onExpand?: () => void;\n    viewOnly?: boolean;\n    style?: ViewStyle;\n    children?: ReactNode;\n}\n\nconst Expandable: FC<ExpandableProps> = props => {\n    const t = useTranslation();\n    const [expanded, setExpanded] = useState(true);\n    const shouldExpand = props.expanded && expanded;\n    const buttonText = props.viewOnly || shouldExpand ? undefined : t(\"change\");\n    const onPress = () => {\n        setExpanded(true);\n        props.onExpand?.();\n    };\n\n    return (\n        <View style={props.style}>\n            <Heading text={props.title} buttonText={buttonText} onPressButton={onPress} />\n            <View style={{ display: shouldExpand ? \"flex\" : \"none\" }}>{props.children}</View>\n        </View>\n    );\n};\n\nexport default Expandable;\n","import React from \"react\";\nimport { ActivityIndicator } from \"react-native\";\n\nimport { Spacing } from \"../constants/dimension\";\n\nconst Loading = () => <ActivityIndicator size={\"large\"} style={{ marginVertical: Spacing.large }} />;\n\nexport default Loading;\n","import React, { FC } from \"react\";\n\nimport { IS_DESKTOP } from \"../constants/dimension\";\nimport useColors from \"../hooks/useColors\";\nimport useLinker from \"../hooks/useLinker\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport FlexView from \"./FlexView\";\nimport Text from \"./Text\";\n\nexport interface MetaProps {\n    label: string;\n    text?: string;\n    suffix?: string;\n    url?: string;\n    danger?: boolean;\n    disabled?: boolean;\n}\n\nconst Meta: FC<MetaProps> = props => {\n    const t = useTranslation();\n    const { textMedium, textLight, placeholder, red } = useColors();\n    const onPress = useLinker(props.url || \"\", \"\", \"_blank\");\n    const text = props.disabled\n        ? \"N/A\"\n        : props.text\n        ? props.text + (props.suffix ? \" \" + props.suffix : \"\")\n        : t(\"fetching\");\n    return (\n        <FlexView style={{ justifyContent: \"space-between\", marginTop: 4 }}>\n            <Text note={!IS_DESKTOP} fontWeight={\"bold\"} style={{ color: props.disabled ? placeholder : textMedium }}>\n                {props.label}\n            </Text>\n            <Text\n                note={!IS_DESKTOP}\n                onPress={props.url ? onPress : undefined}\n                style={{\n                    color: props.danger ? red : props.disabled ? placeholder : props.text ? textMedium : textLight,\n                    textDecorationLine: props.url ? \"underline\" : \"none\"\n                }}>\n                {text}\n            </Text>\n        </FlexView>\n    );\n};\n\nexport default Meta;\n","import React from \"react\";\n\nimport { Spacing } from \"../constants/dimension\";\nimport Token from \"../types/Token\";\nimport Text from \"./Text\";\n\nconst TokenSymbol = (props: { token: Token; disabled?: boolean }) => (\n    <Text medium={true} caption={true} disabled={props.disabled} style={{ marginLeft: Spacing.tiny }}>\n        {props.token.symbol}\n    </Text>\n);\n\nexport default TokenSymbol;\n","import { Percent } from \"@sushiswap/sdk\";\n\nexport const TTL = 60 * 20;\nexport const ALLOWED_SLIPPAGE = new Percent(\"50\", \"10000\"); // 0.05%\nexport const FEE = new Percent(\"3\", \"1000\"); // 0.3%\n","module.exports = __webpack_public_path__ + \"static/media/empty-token.e8aa64c5.png\";","module.exports = __webpack_public_path__ + \"static/media/ETH.ab794f02.png\";","import { constants, utils } from \"ethers\";\nimport Airdrop from \"../../types/Airdrop\";\nimport levxShoyuGrant from \"./levx-shoyu-grant.csv.json\";\nimport sushiCnAma from \"./sushi-cn-ama.csv.json\";\n\nexport default [\n    {\n        name: \"Shoyu Grant Payout\",\n        description: \"For $LEVX holders\",\n        token: constants.AddressZero,\n        merkleRoot: \"0x0737c6eeb66be734365fd7a7a1c505bb32b815da441f2959b0b8141583340472\",\n        snapshot: 13711588,\n        amount: utils.parseEther(\"16.124383959865324089\"),\n        entries: levxShoyuGrant\n    },\n    {\n        name: \"LEVX Airdrop\",\n        description: \"SushiSwap China AMA\",\n        token: \"0xf474E526ADe9aD2CC2B66ffCE528B1A51B91FCdC\",\n        merkleRoot: \"0x84a50342486cf8cd0aa75740ad78b8a780f5ba76139411f5b6433506d538381c\",\n        amount: utils.parseEther(\"6.67\"),\n        entries: sushiCnAma\n    }\n] as Airdrop[];\n","import React, { useCallback, useContext } from \"react\";\nimport { FlatList, View } from \"react-native\";\n\nimport airdrops from \"../constants/airdrops\";\nimport { IS_DESKTOP, Spacing } from \"../constants/dimension\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport { AirdropsState } from \"../hooks/useAirdropsState\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport Airdrop from \"../types/Airdrop\";\nimport TokenWithValue from \"../types/TokenWithValue\";\nimport { formatBalance } from \"../utils\";\nimport CloseIcon from \"./CloseIcon\";\nimport Expandable from \"./Expandable\";\nimport FlexView from \"./FlexView\";\nimport { ITEM_SEPARATOR_HEIGHT } from \"./ItemSeparator\";\nimport Loading from \"./Loading\";\nimport Selectable from \"./Selectable\";\nimport SelectIcon from \"./SelectIcon\";\nimport Text from \"./Text\";\nimport TokenLogo from \"./TokenLogo\";\nimport TokenSymbol from \"./TokenSymbol\";\n\nconst AirdropSelect = ({ state }: { state: AirdropsState }) => {\n    const t = useTranslation();\n    const { tokens } = useContext(EthersContext);\n    const token = tokens.find(tk => tk.address === state.selectedAirdrop?.token);\n    return (\n        <>\n            <Expandable\n                title={t(\"list-of-airdrops\")}\n                expanded={!state.selectedAirdrop}\n                onExpand={() => state.setSelectedAirdrop()}>\n                <AirdropList onSelectAirdrop={state.setSelectedAirdrop} />\n            </Expandable>\n            {state.selectedAirdrop && token && (\n                <AirdropItem\n                    airdrop={state.selectedAirdrop}\n                    token={token}\n                    selected={true}\n                    onSelectAirdrop={() => state.setSelectedAirdrop()}\n                />\n            )}\n        </>\n    );\n};\n\nconst AirdropList = (props: { onSelectAirdrop: (airdrop: Airdrop) => void }) => {\n    const { loadingTokens, tokens } = useContext(EthersContext);\n    const renderItem = useCallback(\n        ({ item }) => {\n            const token = tokens.find(t => t.address === item.token);\n            if (token) {\n                return (\n                    <AirdropItem\n                        key={item.address}\n                        airdrop={item}\n                        token={token}\n                        selected={false}\n                        onSelectAirdrop={props.onSelectAirdrop}\n                    />\n                );\n            } else {\n                return <View />;\n            }\n        },\n        [tokens, props.onSelectAirdrop]\n    );\n    return loadingTokens ? (\n        <Loading />\n    ) : (\n        <FlatList keyExtractor={item => item.token} data={airdrops} renderItem={renderItem} />\n    );\n};\n\n// tslint:disable-next-line:max-func-body-length\nconst AirdropItem = (props: {\n    airdrop: Airdrop;\n    token: TokenWithValue;\n    selected: boolean;\n    onSelectAirdrop: (airdrop: Airdrop) => void;\n}) => {\n    const t = useTranslation();\n    const onPress = useCallback(() => {\n        props.onSelectAirdrop(props.airdrop);\n    }, [props.onSelectAirdrop, props.airdrop]);\n    return (\n        <Selectable\n            selected={props.selected}\n            onPress={onPress}\n            containerStyle={{\n                marginBottom: ITEM_SEPARATOR_HEIGHT\n            }}>\n            <FlexView style={{ alignItems: \"center\" }}>\n                <TokenLogo token={props.token} />\n                <View style={{ marginLeft: Spacing.small }}>\n                    <Text note={true} fontWeight={\"light\"}>\n                        {props.airdrop.description}\n                    </Text>\n                    <Text caption={true} numberOfLines={1} ellipsizeMode={\"tail\"} style={{ width: 180 }}>\n                        {props.airdrop.name}\n                    </Text>\n                </View>\n                <View style={{ flex: 1, alignItems: \"flex-end\" }}>\n                    {props.airdrop.snapshot && (\n                        <Text note={true} fontWeight={\"light\"}>\n                            {t(\"block-\", { number: props.airdrop.snapshot })}\n                        </Text>\n                    )}\n                    <FlexView>\n                        <Text caption={IS_DESKTOP}>{formatBalance(props.airdrop.amount, 18, 8)}</Text>\n                        {IS_DESKTOP && <TokenSymbol token={props.token} />}\n                    </FlexView>\n                </View>\n                {props.selected ? <CloseIcon /> : <SelectIcon />}\n            </FlexView>\n        </Selectable>\n    );\n};\n\nexport default AirdropSelect;\n","import ETH from \"@levxdao/airdrop/deployments/mainnet/ETHAirdrop.json\";\nimport Levx from \"@levxdao/airdrop/deployments/mainnet/LevxAirdrop.json\";\nimport { ETHAirdrop, LevxAirdrop } from \"@levxdao/airdrop/typechain\";\nimport { Contract, ethers } from \"ethers\";\n\nexport const getETHAirdropContract = (signerOrProvider: ethers.Signer | ethers.providers.Provider) => {\n    // @ts-ignore\n    return new Contract(ETH.address, ETH.abi, signerOrProvider) as ETHAirdrop;\n};\n\nexport const getLevxAirdropContract = (signerOrProvider: ethers.Signer | ethers.providers.Provider) => {\n    // @ts-ignore\n    return new Contract(Levx.address, Levx.abi, signerOrProvider) as LevxAirdrop;\n};\n","import { useContext, useEffect, useState } from \"react\";\n\nimport { receipt as ethAirdropReceipt } from \"@levxdao/airdrop/deployments/mainnet/ETHAirdrop.json\";\nimport { getMerkleProof, getMerkleRoot } from \"@levxdao/merkle-tree-generator\";\nimport { Fetcher } from \"@sushiswap/sdk\";\nimport { Event } from \"ethers\";\nimport { ALLOWED_SLIPPAGE, TTL } from \"../constants\";\nimport { ETH, LEVX } from \"../constants/tokens\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport Airdrop from \"../types/Airdrop\";\nimport TokenWithValue from \"../types/TokenWithValue\";\nimport { convertAmount, convertToken, deduct, parseBalance } from \"../utils\";\nimport { getETHAirdropContract, getLevxAirdropContract } from \"../utils/getAirdropContract\";\n\nexport interface AirdropsState {\n    selectedAirdrop?: Airdrop;\n    setSelectedAirdrop: (airdrop?: Airdrop) => void;\n    token?: TokenWithValue;\n    amount?: string;\n    loading: boolean;\n    claimEvent?: Event;\n    onClaimLevx: () => Promise<void>;\n    onClaimETH: () => Promise<void>;\n    onClaimAsLevx: () => Promise<void>;\n    claiming: boolean;\n}\n\n// tslint:disable-next-line:max-func-body-length\nconst useAirdropsState: () => AirdropsState = () => {\n    const { provider, signer, address, tokens, updateTokens } = useContext(EthersContext);\n    const [selectedAirdrop, setSelectedAirdrop] = useState<Airdrop>();\n    const [loading, setLoading] = useState(false);\n    const [claimEvent, setClaimEvent] = useState<Event>();\n    const [claiming, setClaiming] = useState(false);\n\n    useEffect(() => {\n        (async () => {\n            if (selectedAirdrop && provider) {\n                setLoading(true);\n                try {\n                    let contract;\n                    if (selectedAirdrop.token === ETH.address) {\n                        contract = getETHAirdropContract(provider);\n                    } else {\n                        contract = getLevxAirdropContract(provider);\n                    }\n                    const filter = contract.filters.Claim(selectedAirdrop.merkleRoot, address);\n                    const events = await contract.queryFilter(filter, ethAirdropReceipt.blockNumber);\n                    if (events.length > 0) {\n                        setClaimEvent(events[0]);\n                    }\n                } finally {\n                    setLoading(false);\n                }\n            }\n        })();\n    }, [selectedAirdrop, provider]);\n\n    const onClaimLevx = async () => {\n        const entry = selectedAirdrop?.entries.find(e => e[0].toLowerCase() === address?.toLowerCase());\n        if (selectedAirdrop && signer && entry && amount && address) {\n            setClaiming(true);\n            try {\n                const root = getMerkleRoot(selectedAirdrop.entries);\n                const proof = getMerkleProof(selectedAirdrop.entries, entry);\n                const contract = getLevxAirdropContract(signer);\n                const tx = await contract.claim(root, proof, parseBalance(amount));\n                await tx.wait();\n            } finally {\n                setClaiming(false);\n                await updateTokens();\n            }\n        }\n    };\n\n    const onClaimETH = async () => {\n        const entry = selectedAirdrop?.entries.find(e => e[0].toLowerCase() === address?.toLowerCase());\n        if (selectedAirdrop && signer && entry && amount && address) {\n            setClaiming(true);\n            try {\n                const root = getMerkleRoot(selectedAirdrop.entries);\n                const proof = getMerkleProof(selectedAirdrop.entries, entry);\n                const contract = getETHAirdropContract(signer);\n                const tx = await contract.claim(root, proof, parseBalance(amount), address);\n                await tx.wait();\n            } finally {\n                setClaiming(false);\n                await updateTokens();\n            }\n        }\n    };\n\n    const onClaimAsLevx = async () => {\n        const entry = selectedAirdrop?.entries.find(e => e[0].toLowerCase() === address?.toLowerCase());\n        if (selectedAirdrop && signer && entry && amount && address) {\n            setClaiming(true);\n            try {\n                const root = getMerkleRoot(selectedAirdrop.entries);\n                const proof = getMerkleProof(selectedAirdrop.entries, entry);\n                const pair = await Fetcher.fetchPairData(convertToken(ETH), convertToken(LEVX), provider);\n                const [amountOut] = pair.getOutputAmount(convertAmount(ETH, amount));\n                const amountOutMin = deduct(parseBalance(amountOut.toExact()), ALLOWED_SLIPPAGE);\n                const deadline = Math.floor(new Date().getTime() / 1000) + TTL;\n                const contract = getETHAirdropContract(signer);\n                const tx = await contract.claimAndSwapToLevx(\n                    root,\n                    proof,\n                    parseBalance(amount),\n                    amountOutMin,\n                    address,\n                    deadline\n                );\n                await tx.wait();\n            } finally {\n                setClaiming(false);\n                await updateTokens();\n            }\n        }\n    };\n\n    const token = tokens.find(tk => tk.address === selectedAirdrop?.token);\n    const amount = selectedAirdrop?.entries.find(e => e[0].toLowerCase() === address?.toLowerCase())?.[1];\n\n    return {\n        selectedAirdrop,\n        setSelectedAirdrop,\n        token,\n        amount,\n        loading,\n        claimEvent,\n        onClaimLevx,\n        onClaimETH,\n        onClaimAsLevx,\n        claiming\n    };\n};\n\nexport default useAirdropsState;\n","import React, { useContext, useState } from \"react\";\nimport { Platform, View } from \"react-native\";\n\nimport AirdropSelect from \"../components/AirdropSelect\";\nimport BackgroundImage from \"../components/BackgroundImage\";\nimport Border from \"../components/Border\";\nimport Button from \"../components/Button\";\nimport ChangeNetwork from \"../components/ChangeNetwork\";\nimport Container from \"../components/Container\";\nimport Content from \"../components/Content\";\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport FetchingButton from \"../components/FetchingButton\";\nimport InfoBox from \"../components/InfoBox\";\nimport Meta from \"../components/Meta\";\nimport Text from \"../components/Text\";\nimport Title from \"../components/Title\";\nimport WebFooter from \"../components/web/WebFooter\";\nimport { AirdropsSubMenu } from \"../components/web/WebSubMenu\";\nimport airdrops from \"../constants/airdrops\";\nimport { LEVX_TOKEN } from \"../constants/contracts\";\nimport { Spacing } from \"../constants/dimension\";\nimport { ETH } from \"../constants/tokens\";\nimport { EthersContext } from \"../context/EthersContext\";\nimport useAirdropsState, { AirdropsState } from \"../hooks/useAirdropsState\";\nimport useLinker from \"../hooks/useLinker\";\nimport useTranslation from \"../hooks/useTranslation\";\nimport MetamaskError from \"../types/MetamaskError\";\nimport { formatBalance, parseBalance } from \"../utils\";\nimport Screen from \"./Screen\";\n\nconst AirdropsScreen = () => {\n    const t = useTranslation();\n    return (\n        <Screen>\n            <Container>\n                <BackgroundImage />\n                <Content>\n                    <Title text={t(\"airdrops\")} />\n                    <Text light={true}>{t(\"airdrops-desc\")}</Text>\n                    <Airdrops />\n                </Content>\n                {Platform.OS === \"web\" && <WebFooter />}\n            </Container>\n            <AirdropsSubMenu />\n        </Screen>\n    );\n};\n\nconst Airdrops = () => {\n    const { chainId } = useContext(EthersContext);\n    const state = useAirdropsState();\n    if (chainId !== 1) return <ChangeNetwork />;\n    return (\n        <View style={{ marginTop: Spacing.large }}>\n            <AirdropSelect state={state} />\n            <Border />\n            <AmountInfo state={state} />\n        </View>\n    );\n};\n\nconst AmountInfo = ({ state }: { state: AirdropsState }) => {\n    const t = useTranslation();\n    const disabled = !state.selectedAirdrop || !state.amount;\n    const snapshot = state.selectedAirdrop?.snapshot;\n    return (\n        <InfoBox>\n            <Meta\n                label={t(\"claimable-\", { symbol: state.token?.symbol || \"LEVX\" })}\n                text={state.amount || \"\"}\n                disabled={disabled}\n            />\n            {snapshot && (\n                <Meta label={t(\"block\")} text={String(snapshot)} url={\"https://etherscan.io/block/\" + snapshot} />\n            )}\n            <Controls state={state} />\n        </InfoBox>\n    );\n};\n\nconst Controls = ({ state }: { state: AirdropsState }) => {\n    const [error, setError] = useState<MetamaskError>({});\n    return (\n        <View style={{ marginTop: Spacing.normal }}>\n            {!state.selectedAirdrop ? (\n                <ClaimButton state={state} onError={setError} disabled={true} />\n            ) : state.loading ? (\n                <FetchingButton />\n            ) : state.claimEvent ? (\n                <ClaimedButton />\n            ) : state.claiming ? (\n                <>\n                    <ClaimingButton />\n                    <View style={{ height: Spacing.tiny }} />\n                    <ShareAirdropToTwitterButton state={state} />\n                </>\n            ) : !state.amount || parseBalance(state.amount).isZero() ? (\n                <NotEligibleButton />\n            ) : state.selectedAirdrop.token === LEVX_TOKEN ? (\n                <ClaimButton state={state} onError={setError} />\n            ) : (\n                <>\n                    <ClaimButton state={state} onError={setError} outline={true} />\n                    <View style={{ height: Spacing.tiny }} />\n                    <ClaimAsLevxButton state={state} onError={setError} />\n                </>\n            )}\n            {error.message && error.code !== 4001 && <ErrorMessage error={error} />}\n        </View>\n    );\n};\nconst NotEligibleButton = ({}: {}) => {\n    const t = useTranslation();\n    return <Button title={t(\"not-eligible\")} disabled={true} />;\n};\n\nconst ClaimingButton = () => {\n    const t = useTranslation();\n    return <Button title={t(\"claiming\")} disabled={true} />;\n};\n\nconst ShareAirdropToTwitterButton = ({ state }: { state: AirdropsState }) => {\n    const t = useTranslation();\n    const tweet =\n        state.selectedAirdrop && state.token\n            ? \"The dictator of @LevXDAOhGeez is airdropping \" +\n              formatBalance(state.selectedAirdrop.amount, 18, 8) +\n              \" $\" +\n              state.token.symbol +\n              \" (=\" +\n              ((state.token.priceUSD || 0) * Number(formatBalance(state.selectedAirdrop.amount, 18, 2))).toFixed(4) +\n              \" USD) for poor Mortys in the DAO. If you want to get notified of the upcoming airdrops, visit the discord.\\n👇https://discord.gg/oh-geez\"\n            : \"\";\n    const onPress = useLinker(\"https://twitter.com/intent/tweet?text=\" + encodeURIComponent(tweet), \"\", \"_blank\");\n    return (\n        <Button\n            icon={{\n                type: \"material-community\",\n                name: \"twitter\",\n                color: \"white\",\n                size: 20\n            }}\n            iconRight={true}\n            title={t(\"share-airdrop-to-twitter\")}\n            color={\"#1DA1F2\"}\n            onPress={onPress}\n        />\n    );\n};\n\nconst ClaimButton = ({\n    state,\n    onError,\n    outline,\n    disabled\n}: {\n    state: AirdropsState;\n    onError: (e) => void;\n    outline?: boolean;\n    disabled?: boolean;\n}) => {\n    const t = useTranslation();\n    const onPress = async () => {\n        onError({});\n        try {\n            if (state.token === ETH) {\n                await state.onClaimETH();\n            } else {\n                await state.onClaimLevx();\n            }\n        } catch (e) {\n            onError(e);\n        }\n    };\n    return (\n        <Button\n            title={t(\"claim\")}\n            loading={state.claiming}\n            onPress={onPress}\n            disabled={disabled}\n            type={outline ? \"outline\" : undefined}\n        />\n    );\n};\n\nconst ClaimAsLevxButton = ({\n    state,\n    onError,\n    disabled\n}: {\n    state: AirdropsState;\n    onError: (e) => void;\n    disabled?: boolean;\n}) => {\n    const t = useTranslation();\n    const onPress = async () => {\n        onError({});\n        try {\n            await state.onClaimAsLevx();\n        } catch (e) {\n            onError(e);\n        }\n    };\n    return <Button title={t(\"claim-as-levx\")} loading={state.claiming} onPress={onPress} disabled={disabled} />;\n};\n\nconst ClaimedButton = () => {\n    const t = useTranslation();\n    return <Button title={t(\"already-claimed\")} disabled={true} />;\n};\n\nexport default AirdropsScreen;\n"],"sourceRoot":""}